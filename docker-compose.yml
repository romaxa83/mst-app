version: '3'
services:
#  db:
#    image: postgres:latest
#    container_name: mst__pg_db
#    hostname: mst__pg_db
#    restart: always
#    environment:
#      POSTGRES_USER: root
#      POSTGRES_PASSWORD: root
#      POSTGRES_DB: db
#    ports:
#      - 192.168.141.1:5432:5432
#    volumes:
#      - ./docker/storage/pgdb:/var/lib/postgresql/data

  db_lib:
    image: postgres:latest
    container_name: mst__pg_db_lib
    hostname: mst__pg_db_lib
    restart: always
    environment:
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: db_lib
    ports:
      - 192.168.141.1:54321:5432
    volumes:
      - ./docker/storage/library/pgdb:/var/lib/postgresql/data

  postgesql:
    image: postgres:13-alpine
    container_name: microservices_postgesql
    hostname: mst__pg_db_service
    expose:
      - "5432"
    ports:
      - "5432:5432"
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=products
      - POSTGRES_HOST=5432
    command: -p 5432
    volumes:
      - ./docker/storage/service/pgdb:/var/lib/postgresql/data

#  prometheus:
#    image: prom/prometheus:latest
#    container_name: prometheus
#    hostname: prometheus
#    volumes:
#      - ./docker/dev/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#      - ./docker/storage/prometheus:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#    ports:
#      - 9090:9090
#
#  grafana:
#    image: grafana/grafana:latest
#    container_name: grafana
#    hostname: grafana
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./docker/storage/grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=root
#      - GF_SECURITY_ADMIN_PASSWORD=root
#      - GF_USERS_ALLOW_SIGN_UP=false
#    ports:
#      - 3000:3000

# FTP Storage
#  storage:
#    build:
#      context: ./storage/docker/dev
#      dockerfile: nginx.docker
#    container_name: mst__storage_nginx
#    hostname: mst__storage_nginx
#    volumes:
#      - ./storage:/app
#    ports:
#      - 192.168.141.1:8081:80
#  storage-ftp:
#    image: stilliard/pure-ftpd
#    container_name: mst__storage_ftp
#    hostname: mst__storage_ftp
#    ports:
#      - 192.168.141.1:21:21
#      - 192.168.141.1:30000-30009:30000-30009
#    environment:
#      PUBLICHOST: "192.168.141.1"
#      FTP_USER_NAME: app
#      FTP_USER_PASS: secret
#      FTP_USER_HOME: /app
#    volumes:
#      - ./storage/public:/app

  zoo1:
    image: zookeeper:3.4.9
    restart: always
    hostname: zoo1
    container_name: mst__zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo1:2888:3888
    volumes:
      - ./docker/storage/zoo1/data:/data
      - ./docker/storage/zoo1/datalog:/datalog

  kafka1:
    image: confluentinc/cp-kafka:5.5.1
    container_name: mst__kafka
    restart: always
    hostname: kafka1
    ports:
      - "9092:9092"
      - "9999:9999"
    environment:
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zoo1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9999
      KAFKA_JMX_HOSTNAME: ${DOCKER_HOST_IP:-127.0.0.1}
    volumes:
      - ./docker/storage/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zoo1

  jaeger:
    container_name: mst__jaeger
    restart: always
    image: jaegertracing/all-in-one:1.21
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"

  redis:
    image: redis:6-alpine
    restart: always
    container_name: mst__redis
    ports:
      - "6379:6379"

  mailer:
    image: mailhog/mailhog
    container_name: mst__mailer
    hostname: mst__mailer
    ports:
      - 192.168.141.1:8025:8025
      - 192.168.141.1:1025:1025

  minio:
    image: bitnami/minio:latest
    container_name: mst__minio
    hostname: mst__mionio
    ports:
      - 192.168.141.1:9000:9000
      - 192.168.141.1:9001:9001
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    volumes:
      - ./storage/minio:/data
#    command: minio server /data

  mongodb:
    image: mongo:latest
    restart: always
    container_name: mst__mongodb
    hostname: mst__mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
      MONGODB_DATABASE: products
    ports:
      - "27017:27017"
    volumes:
      - ./docker/storage/mongo:/data/db

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.141.0/24