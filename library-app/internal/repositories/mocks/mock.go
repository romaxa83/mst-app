// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	input "github.com/romaxa83/mst-app/library-app/internal/delivery/http/input"
	resources "github.com/romaxa83/mst-app/library-app/internal/delivery/http/resources"
	models "github.com/romaxa83/mst-app/library-app/internal/models"
	db "github.com/romaxa83/mst-app/library-app/pkg/db"
	value_obj "github.com/romaxa83/mst-app/library-app/pkg/value-obj"
)

// MockCategory is a mock of Category interface.
type MockCategory struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryMockRecorder
}

// MockCategoryMockRecorder is the mock recorder for MockCategory.
type MockCategoryMockRecorder struct {
	mock *MockCategory
}

// NewMockCategory creates a new mock instance.
func NewMockCategory(ctrl *gomock.Controller) *MockCategory {
	mock := &MockCategory{ctrl: ctrl}
	mock.recorder = &MockCategoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategory) EXPECT() *MockCategoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategory) Create(input input.CreateCategory) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategory)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockCategory) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategory)(nil).Delete), id)
}

// DeleteForce mocks base method.
func (m *MockCategory) DeleteForce(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteForce", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteForce indicates an expected call of DeleteForce.
func (mr *MockCategoryMockRecorder) DeleteForce(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteForce", reflect.TypeOf((*MockCategory)(nil).DeleteForce), id)
}

// GetAllList mocks base method.
func (m *MockCategory) GetAllList() ([]resources.CategoryListResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllList")
	ret0, _ := ret[0].([]resources.CategoryListResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllList indicates an expected call of GetAllList.
func (mr *MockCategoryMockRecorder) GetAllList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllList", reflect.TypeOf((*MockCategory)(nil).GetAllList))
}

// GetAllPagination mocks base method.
func (m *MockCategory) GetAllPagination(query input.GetCategoryQuery) (db.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPagination", query)
	ret0, _ := ret[0].(db.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPagination indicates an expected call of GetAllPagination.
func (mr *MockCategoryMockRecorder) GetAllPagination(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPagination", reflect.TypeOf((*MockCategory)(nil).GetAllPagination), query)
}

// GetAllPaginationArchive mocks base method.
func (m *MockCategory) GetAllPaginationArchive(query input.GetCategoryQuery) (db.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaginationArchive", query)
	ret0, _ := ret[0].(db.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaginationArchive indicates an expected call of GetAllPaginationArchive.
func (mr *MockCategoryMockRecorder) GetAllPaginationArchive(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaginationArchive", reflect.TypeOf((*MockCategory)(nil).GetAllPaginationArchive), query)
}

// GetOneById mocks base method.
func (m *MockCategory) GetOneById(id int) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", id)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockCategoryMockRecorder) GetOneById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockCategory)(nil).GetOneById), id)
}

// Restore mocks base method.
func (m *MockCategory) Restore(id int) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Restore", id)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Restore indicates an expected call of Restore.
func (mr *MockCategoryMockRecorder) Restore(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restore", reflect.TypeOf((*MockCategory)(nil).Restore), id)
}

// Update mocks base method.
func (m *MockCategory) Update(id int, input input.UpdateCategory) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, input)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryMockRecorder) Update(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategory)(nil).Update), id, input)
}

// MockAuthor is a mock of Author interface.
type MockAuthor struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorMockRecorder
}

// MockAuthorMockRecorder is the mock recorder for MockAuthor.
type MockAuthorMockRecorder struct {
	mock *MockAuthor
}

// NewMockAuthor creates a new mock instance.
func NewMockAuthor(ctrl *gomock.Controller) *MockAuthor {
	mock := &MockAuthor{ctrl: ctrl}
	mock.recorder = &MockAuthorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthor) EXPECT() *MockAuthorMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthor) Create(input input.CreateAuthor) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthorMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthor)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockAuthor) Delete(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthorMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthor)(nil).Delete), id)
}

// GetAllList mocks base method.
func (m *MockAuthor) GetAllList() ([]resources.AuthorListResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllList")
	ret0, _ := ret[0].([]resources.AuthorListResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllList indicates an expected call of GetAllList.
func (mr *MockAuthorMockRecorder) GetAllList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllList", reflect.TypeOf((*MockAuthor)(nil).GetAllList))
}

// GetAllPagination mocks base method.
func (m *MockAuthor) GetAllPagination(query input.GetAuthorQuery) (db.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPagination", query)
	ret0, _ := ret[0].(db.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPagination indicates an expected call of GetAllPagination.
func (mr *MockAuthorMockRecorder) GetAllPagination(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPagination", reflect.TypeOf((*MockAuthor)(nil).GetAllPagination), query)
}

// GetOneById mocks base method.
func (m *MockAuthor) GetOneById(id int) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", id)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockAuthorMockRecorder) GetOneById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockAuthor)(nil).GetOneById), id)
}

// GetOneByName mocks base method.
func (m *MockAuthor) GetOneByName(name string) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByName", name)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByName indicates an expected call of GetOneByName.
func (mr *MockAuthorMockRecorder) GetOneByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByName", reflect.TypeOf((*MockAuthor)(nil).GetOneByName), name)
}

// Update mocks base method.
func (m *MockAuthor) Update(id int, input input.UpdateAuthor) (models.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, input)
	ret0, _ := ret[0].(models.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthorMockRecorder) Update(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthor)(nil).Update), id, input)
}

// MockBook is a mock of Book interface.
type MockBook struct {
	ctrl     *gomock.Controller
	recorder *MockBookMockRecorder
}

// MockBookMockRecorder is the mock recorder for MockBook.
type MockBookMockRecorder struct {
	mock *MockBook
}

// NewMockBook creates a new mock instance.
func NewMockBook(ctrl *gomock.Controller) *MockBook {
	mock := &MockBook{ctrl: ctrl}
	mock.recorder = &MockBookMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBook) EXPECT() *MockBookMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBook) Create(input input.CreateBook) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockBookMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBook)(nil).Create), input)
}

// Delete mocks base method.
func (m *MockBook) Delete(id value_obj.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBookMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBook)(nil).Delete), id)
}

// GetAllList mocks base method.
func (m *MockBook) GetAllList() ([]resources.BookListResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllList")
	ret0, _ := ret[0].([]resources.BookListResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllList indicates an expected call of GetAllList.
func (mr *MockBookMockRecorder) GetAllList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllList", reflect.TypeOf((*MockBook)(nil).GetAllList))
}

// GetAllPagination mocks base method.
func (m *MockBook) GetAllPagination(query input.GetBookQuery) (db.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPagination", query)
	ret0, _ := ret[0].(db.Pagination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPagination indicates an expected call of GetAllPagination.
func (mr *MockBookMockRecorder) GetAllPagination(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPagination", reflect.TypeOf((*MockBook)(nil).GetAllPagination), query)
}

// GetOneById mocks base method.
func (m *MockBook) GetOneById(id value_obj.ID) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockBookMockRecorder) GetOneById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockBook)(nil).GetOneById), id)
}

// Update mocks base method.
func (m *MockBook) Update(id value_obj.ID, input input.UpdateBook) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, input)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockBookMockRecorder) Update(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBook)(nil).Update), id, input)
}

// MockMedia is a mock of Media interface.
type MockMedia struct {
	ctrl     *gomock.Controller
	recorder *MockMediaMockRecorder
}

// MockMediaMockRecorder is the mock recorder for MockMedia.
type MockMediaMockRecorder struct {
	mock *MockMedia
}

// NewMockMedia creates a new mock instance.
func NewMockMedia(ctrl *gomock.Controller) *MockMedia {
	mock := &MockMedia{ctrl: ctrl}
	mock.recorder = &MockMediaMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMedia) EXPECT() *MockMediaMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockMedia) Create(input input.UploadMedia) (models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMediaMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMedia)(nil).Create), input)
}

// SetUrl mocks base method.
func (m *MockMedia) SetUrl(model models.Media, url string) (models.Media, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUrl", model, url)
	ret0, _ := ret[0].(models.Media)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUrl indicates an expected call of SetUrl.
func (mr *MockMediaMockRecorder) SetUrl(model, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUrl", reflect.TypeOf((*MockMedia)(nil).SetUrl), model, url)
}

// MockImport is a mock of Import interface.
type MockImport struct {
	ctrl     *gomock.Controller
	recorder *MockImportMockRecorder
}

// MockImportMockRecorder is the mock recorder for MockImport.
type MockImportMockRecorder struct {
	mock *MockImport
}

// NewMockImport creates a new mock instance.
func NewMockImport(ctrl *gomock.Controller) *MockImport {
	mock := &MockImport{ctrl: ctrl}
	mock.recorder = &MockImportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImport) EXPECT() *MockImportMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockImport) Create(input input.CreateImport) (models.Import, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", input)
	ret0, _ := ret[0].(models.Import)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockImportMockRecorder) Create(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockImport)(nil).Create), input)
}

// GetOneById mocks base method.
func (m *MockImport) GetOneById(id int) (models.Import, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneById", id)
	ret0, _ := ret[0].(models.Import)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneById indicates an expected call of GetOneById.
func (mr *MockImportMockRecorder) GetOneById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneById", reflect.TypeOf((*MockImport)(nil).GetOneById), id)
}
